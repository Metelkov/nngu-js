
// 10. Дан объект с ключами и значениями. Запишите в первый массив ключи объекта, а во второй - значения.
// let data = [
// 	{
// 		1: 11,
// 		2: 12,
// 		3: 13,
// 	},
// 	{
// 		1: 21,
// 		2: 22,
// 		3: 23,
// 	},
// 	{
// 		1: 24,
// 		2: 25,
// 		3: 26,
// 	},
// ];
// Найдите сумму элементов этой структуры.


// Метод flat() возвращает новый массив и уменьшает вложенность массива на заданное количество уровней. Метод принимает необязательный аргумент depth — количество уровней, на которые нужно уменьшить вложенность. Значение по умолчанию = 1.
// Если вложенность неизвестна, но нужно получить из массива с вложенными элементами плоский массив, то передайте аргумент Infinity. Тогда метод рекурсивно обойдёт массив и сделает на его основе новый плоский.
// const flat = nested.flat(Infinity)

// сейчас свернем все в один массив

// const nested = [
//   'первый уровень',
//   'первый уровень',
//   [
//     'второй уровень',
//     'второй уровень',
//     [
//       'третий уровень',
//       'третий уровень'
//     ]
//   ]
// ]

// const flat = nested.flat(2)
// console.log(flat)

// получим
// 0: "первый уровень"
// 1: "первый уровень"
// 2: "второй уровень"
// 3: "второй уровень"
// 4: "третий уровень"
// 5: "третий уровень"



let data = [
	{
		1: 11,
		2: 12,
		3: 13,
	},
	{
		1: 21,
		2: 22,
		3: 23,
	},
	{
		1: 24,
		2: 25,
		3: 26,
	},
];




let ks=new Array();
data.forEach(elem=>{
  ks.push(Object.keys(elem));
});
console.log(ks.flat(2));//В этом варианте использую метод разворачивания массива с двух уровней до одного. Мы на нем внимания не акцентировали, но в презентации есть.
let vals=new Array();
data.forEach(elem=>{
  vals.push(Object.values(elem));
});
console.log(vals.flat(2));


let sum=0;
data.forEach(elem=>{
for ([key, value] of Object.entries(elem)) {
 sum+=value;
}
});
console.log(sum);